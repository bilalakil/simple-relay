AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: simple-relay

Parameters:
  ConnectionExpireAfterSeconds:
    Type: Number
    Default: 1800
    Description: (Required) The duration (in seconds) after which an innactive connection should be expire-able. Note that it will in fact be expired some time after.
    MinValue: 1
    ConstraintDescription: Required. Must be greater than or equal to 1.
  SessionExpireAfterSeconds:
    Type: Number
    Default: 1800
    Description: (Required) The duration (in seconds) after which an innactive session should be expire-able. Note that it will in fact be expired some time after.
    MinValue: 1
    ConstraintDescription: Required. Must be greater than or equal to 1.

Resources:
  ConnectionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      # - AttributeName: sessionId
      #   AttributeType: S
      # - AttributeName: expireAfter
      #  AttributeType: N
      KeySchema:
      - AttributeName: id
        KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TableName: connections # Update lambda if you change this
      TimeToLiveSpecification:
        AttributeName: expireAfter
        Enabled: true
  SessionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: id # .open.<type>.<targetNumMembers> OR <id>
        AttributeType: S
      # - AttributeName: type
      #   AttributeType: S
      # - AttributeName: expireAfter
      #   AttributeType: N
      # - AttributeName: openSessionId
      #   AttributeType: S
      # - AttributeName: members # { M: { memberId: { S: <str> }[, connId: { S: <str> }] } }
      #   AttributeType: L
      # - AttributeName: targetNumMembers
      #   AttributeType: N
      # - AttributeName: isPrivate
      #   AttributeType: BOOL
      KeySchema:
      - AttributeName: id
        KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TableName: sessions # Update lambda if you change this
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      TimeToLiveSpecification:
        AttributeName: expireAfter
        Enabled: true

  WebSocketLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: app.webSocketHandler
      Runtime: nodejs12.x
      Environment:
        Variables:
          CONNECTION_TABLE_NAME: connections
          CONNECTION_EXPIRE_AFTER_SECONDS: !Ref ConnectionExpireAfterSeconds
          SESSION_TABLE_NAME: sessions
          SESSION_EXPIRE_AFTER_SECONDS: !Ref SessionExpireAfterSeconds
      Policies:
      - DynamoDBCrudPolicy:
          TableName: connections
      - DynamoDBCrudPolicy:
          TableName: sessions
      - Statement:
        - Effect: Allow
          Action:
          - execute-api:ManageConnections
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*'

  SessionMembersChangedLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: app.sessionMembersChangedHandler
      Runtime: nodejs12.x
      Environment:
        Variables:
          CONNECTION_TABLE_NAME: connections
          SESSION_TABLE_NAME: sessions
          APIGW_ENDPOINT: !Sub '${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}'
      Events:
        TableEventSource:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt SessionTable.StreamArn
            StartingPosition: TRIM_HORIZON
            BatchSize: 1
            MaximumRetryAttempts: 2
      Policies:
      - DynamoDBCrudPolicy:
          TableName: connections
      - DynamoDBCrudPolicy:
          TableName: sessions
      - Statement:
        - Effect: Allow
          Action:
          - execute-api:ManageConnections
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*'

  PingLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: app.pingHandler
      Runtime: nodejs12.x
      Events:
        Ping:
          Type: Api
          Properties:
            Path: /ping
            Method: get

  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: SimpleRelayWebSocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: \\$default

  ConnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketLambda.Arn}/invocations'
  DisconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketLambda.Arn}/invocations'
  DefaultInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketLambda.Arn}/invocations'

  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join
        - '/'
        - - integrations
          - !Ref ConnectInteg
  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - '/'
        - - integrations
          - !Ref DisconnectInteg
  DefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $default
      AuthorizationType: NONE
      OperationName: DefaultRoute
      Target: !Join
        - '/'
        - - integrations
          - !Ref DefaultInteg

  WebSocketLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketApi
      - WebSocketLambda
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketLambda
      Principal: apigateway.amazonaws.com

  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
    - ConnectRoute
    - DisconnectRoute
    - DefaultRoute
    Properties:
      ApiId: !Ref WebSocketApi
  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: Prod
      Description: Prod Stage
      DeploymentId: !Ref Deployment
      ApiId: !Ref WebSocketApi

Outputs:
  HTTPSAPIURL:
    Description: URL of the Simple Relay HTTPS API
    Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}'
  WebSocketAPIURL:
    Description: URL of the Simple Relay WSS API
    Value: !Sub 'wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}'
